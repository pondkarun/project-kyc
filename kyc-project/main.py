import cv2
import easyocr
import re
import json
import os

# ---------- ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° Path ----------
img_path = 'images/id_card_pond.jpg'
output_img_path = 'outputs/id_card_with_ocr.jpg'
output_json_path = 'outputs/kyc_data.json'
os.makedirs("outputs", exist_ok=True)

# ---------- ‡πÇ‡∏´‡∏•‡∏î OCR Reader ----------
reader = easyocr.Reader(['th', 'en'], gpu=False)

# ---------- ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û ----------
image = cv2.imread(img_path)
if image is None:
    print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà: {img_path}")
    exit()

image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

# ---------- OCR ----------
results = reader.readtext(image_rgb)

# ---------- ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö OCR ‡∏•‡∏á‡∏†‡∏≤‡∏û ----------
for (bbox, text, conf) in results:
    pts = [tuple(map(int, point)) for point in bbox]
    cv2.rectangle(image, pts[0], pts[2], (0, 255, 0), 2)
    cv2.putText(image, text, pts[0], cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 1)

cv2.imwrite(output_img_path, image)
print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏£‡∏≠‡∏ö OCR ‡∏ó‡∏µ‡πà: {output_img_path}")

# ---------- ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ----------
texts = [text.lower().strip() for _, text, _ in results]
joined_text = ' '.join(texts)

kyc_data = {
    "id_number": None,
    "name_th": None,
    "name_en": None,
    "birth_th": None,
    "birth_en": None,
    "issue_th": None,
    "issue_en": None,
    "expiry_th": None,
    "expiry_en": None
}

# ---------- ‡∏à‡∏±‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô ----------
match = re.search(r'\d\s?\d{4}\s?\d{5}\s?\d{2}\s?\d', joined_text)
if match:
    kyc_data["id_number"] = match.group().replace(' ', '')

# ---------- ‡∏à‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ó‡∏¢ ----------
for t in texts:
    if '‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏Å‡∏∏‡∏•' in t:
        name_th = t.split('‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏Å‡∏∏‡∏•')[-1].strip()
        kyc_data["name_th"] = name_th.replace('‡∏∫', '')  # ‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∞‡πÄ‡∏Å‡∏¥‡∏ô
        break

# ---------- ‡∏à‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© (‡∏ä‡∏∑‡πà‡∏≠ + ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• ‡∏à‡∏≤‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ) ----------
for i, t in enumerate(texts):
    if 'mr.' in t:
        kyc_data["name_en"] = t.replace('mr.', '').strip().title()
    if 'last name' in t and i + 1 < len(texts):
        last = texts[i + 1].strip().title()
        if kyc_data["name_en"]:
            kyc_data["name_en"] += f' {last}'

# ---------- ‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î / ‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å / ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏à‡∏≤‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ----------
for i, t in enumerate(texts):
    if '‡πÄ‡∏Å‡∏¥‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà' in t and i + 1 < len(texts):
        kyc_data["birth_th"] = texts[i + 1].strip()
    elif 'date of birth' in t and i + 1 < len(texts):
        kyc_data["birth_en"] = texts[i + 1].strip().title()
    elif '‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡∏ö‡∏±‡∏ï‡∏£' in t and i + 1 < len(texts):
        kyc_data["issue_th"] = texts[i + 1].strip()
    elif 'date of issue' in t and i + 1 < len(texts):
        kyc_data["issue_en"] = texts[i + 1].strip().title()
    elif '‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏' in t and i + 1 < len(texts):
        kyc_data["expiry_th"] = texts[i + 1].strip()
    elif 'date of expiry' in t and i + 1 < len(texts):
        kyc_data["expiry_en"] = texts[i + 1].strip().title()

# ---------- ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• ----------
print("\nüéØ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡πÑ‡∏î‡πâ:")
for key, value in kyc_data.items():
    print(f"{key}: {value}")

# ---------- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å JSON ----------
with open(output_json_path, "w", encoding="utf-8") as f:
    json.dump(kyc_data, f, ensure_ascii=False, indent=2)

print(f"\n‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà: {output_json_path}")